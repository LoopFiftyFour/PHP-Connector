<?php
/**
 * AdministrativeApi
 * PHP version 5
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Loop54 Engine
 *
 * Loop54 Search is a learning search engine for e-commerce. It helps online shoppers find what they’re looking for, and allows them to explore a wider range of relevant products in a retailer’s catalogue.
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Loop54\API\OpenAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Loop54\API\OpenAPI\ApiException;
use Loop54\API\OpenAPI\Configuration;
use Loop54\API\OpenAPI\HeaderSelector;
use Loop54\API\OpenAPI\ObjectSerializer;

/**
 * AdministrativeApi Class Doc Comment
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdministrativeApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getIndexedAttributeValuesPost
     *
     * Get indexed attribute values
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesRequest $get_indexed_attribute_values_request get_indexed_attribute_values_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getIndexedAttributeValuesPost($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version = null)
    {
        list($response) = $this->getIndexedAttributeValuesPostWithHttpInfo($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version);
        return $response;
    }

    /**
     * Operation getIndexedAttributeValuesPostWithHttpInfo
     *
     * Get indexed attribute values
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesRequest $get_indexed_attribute_values_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexedAttributeValuesPostWithHttpInfo($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version = null)
    {
        $request = $this->getIndexedAttributeValuesPostRequest($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndexedAttributeValuesPostAsync
     *
     * Get indexed attribute values
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesRequest $get_indexed_attribute_values_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexedAttributeValuesPostAsync($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version = null)
    {
        return $this->getIndexedAttributeValuesPostAsyncWithHttpInfo($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndexedAttributeValuesPostAsyncWithHttpInfo
     *
     * Get indexed attribute values
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesRequest $get_indexed_attribute_values_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexedAttributeValuesPostAsyncWithHttpInfo($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesResponse';
        $request = $this->getIndexedAttributeValuesPostRequest($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndexedAttributeValuesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributeValuesRequest $get_indexed_attribute_values_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIndexedAttributeValuesPostRequest($api_version, $loop54_key, $get_indexed_attribute_values_request, $lib_version = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getIndexedAttributeValuesPost'
            );
        }
        // verify the required parameter 'loop54_key' is set
        if ($loop54_key === null || (is_array($loop54_key) && count($loop54_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loop54_key when calling getIndexedAttributeValuesPost'
            );
        }
        // verify the required parameter 'get_indexed_attribute_values_request' is set
        if ($get_indexed_attribute_values_request === null || (is_array($get_indexed_attribute_values_request) && count($get_indexed_attribute_values_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_indexed_attribute_values_request when calling getIndexedAttributeValuesPost'
            );
        }

        $resourcePath = '/getIndexedAttributeValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }


        // body params
        $_tempBody = null;
        if (isset($get_indexed_attribute_values_request)) {
            $_tempBody = $get_indexed_attribute_values_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getIndexedAttributesPost
     *
     * Get indexed attributes
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributesRequest $get_indexed_attributes_request get_indexed_attributes_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getIndexedAttributesPost($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version = null)
    {
        list($response) = $this->getIndexedAttributesPostWithHttpInfo($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version);
        return $response;
    }

    /**
     * Operation getIndexedAttributesPostWithHttpInfo
     *
     * Get indexed attributes
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributesRequest $get_indexed_attributes_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getIndexedAttributesPostWithHttpInfo($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version = null)
    {
        $request = $this->getIndexedAttributesPostRequest($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getIndexedAttributesPostAsync
     *
     * Get indexed attributes
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributesRequest $get_indexed_attributes_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexedAttributesPostAsync($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version = null)
    {
        return $this->getIndexedAttributesPostAsyncWithHttpInfo($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getIndexedAttributesPostAsyncWithHttpInfo
     *
     * Get indexed attributes
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributesRequest $get_indexed_attributes_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getIndexedAttributesPostAsyncWithHttpInfo($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetIndexedAttributesResponse';
        $request = $this->getIndexedAttributesPostRequest($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getIndexedAttributesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetIndexedAttributesRequest $get_indexed_attributes_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getIndexedAttributesPostRequest($api_version, $loop54_key, $get_indexed_attributes_request, $lib_version = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getIndexedAttributesPost'
            );
        }
        // verify the required parameter 'loop54_key' is set
        if ($loop54_key === null || (is_array($loop54_key) && count($loop54_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loop54_key when calling getIndexedAttributesPost'
            );
        }
        // verify the required parameter 'get_indexed_attributes_request' is set
        if ($get_indexed_attributes_request === null || (is_array($get_indexed_attributes_request) && count($get_indexed_attributes_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_indexed_attributes_request when calling getIndexedAttributesPost'
            );
        }

        $resourcePath = '/getIndexedAttributes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }


        // body params
        $_tempBody = null;
        if (isset($get_indexed_attributes_request)) {
            $_tempBody = $get_indexed_attributes_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation syncPost
     *
     * Perform full sync
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\SyncRequest $sync_request sync_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function syncPost($api_version, $loop54_key, $sync_request, $lib_version = null)
    {
        list($response) = $this->syncPostWithHttpInfo($api_version, $loop54_key, $sync_request, $lib_version);
        return $response;
    }

    /**
     * Operation syncPostWithHttpInfo
     *
     * Perform full sync
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\SyncRequest $sync_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function syncPostWithHttpInfo($api_version, $loop54_key, $sync_request, $lib_version = null)
    {
        $request = $this->syncPostRequest($api_version, $loop54_key, $sync_request, $lib_version);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation syncPostAsync
     *
     * Perform full sync
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\SyncRequest $sync_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncPostAsync($api_version, $loop54_key, $sync_request, $lib_version = null)
    {
        return $this->syncPostAsyncWithHttpInfo($api_version, $loop54_key, $sync_request, $lib_version)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation syncPostAsyncWithHttpInfo
     *
     * Perform full sync
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\SyncRequest $sync_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function syncPostAsyncWithHttpInfo($api_version, $loop54_key, $sync_request, $lib_version = null)
    {
        $returnType = 'object';
        $request = $this->syncPostRequest($api_version, $loop54_key, $sync_request, $lib_version);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'syncPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $loop54_key Your API key. (required)
     * @param  \Loop54\API\OpenAPI\Model\SyncRequest $sync_request (required)
     * @param  string $lib_version What library is used to generate this request. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function syncPostRequest($api_version, $loop54_key, $sync_request, $lib_version = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling syncPost'
            );
        }
        // verify the required parameter 'loop54_key' is set
        if ($loop54_key === null || (is_array($loop54_key) && count($loop54_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $loop54_key when calling syncPost'
            );
        }
        // verify the required parameter 'sync_request' is set
        if ($sync_request === null || (is_array($sync_request) && count($sync_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sync_request when calling syncPost'
            );
        }

        $resourcePath = '/sync';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }


        // body params
        $_tempBody = null;
        if (isset($sync_request)) {
            $_tempBody = $sync_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
