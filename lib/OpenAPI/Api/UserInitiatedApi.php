<?php
/**
 * UserInitiatedApi
 * PHP version 5
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Loop54 Engine
 *
 * Loop54 Search is a learning search engine for e-commerce. It helps online shoppers find what they’re looking for, and allows them to explore a wider range of relevant products in a retailer’s catalogue.
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Loop54\API\OpenAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Loop54\API\OpenAPI\ApiException;
use Loop54\API\OpenAPI\Configuration;
use Loop54\API\OpenAPI\HeaderSelector;
use Loop54\API\OpenAPI\ObjectSerializer;

/**
 * UserInitiatedApi Class Doc Comment
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserInitiatedApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation autoCompletePost
     *
     * Find autocompletions for a query
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\AutoCompleteRequest $auto_complete_request auto_complete_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\AutoCompleteResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function autoCompletePost($api_version, $user_id, $auto_complete_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->autoCompletePostWithHttpInfo($api_version, $user_id, $auto_complete_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation autoCompletePostWithHttpInfo
     *
     * Find autocompletions for a query
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\AutoCompleteRequest $auto_complete_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\AutoCompleteResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoCompletePostWithHttpInfo($api_version, $user_id, $auto_complete_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->autoCompletePostRequest($api_version, $user_id, $auto_complete_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\AutoCompleteResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\AutoCompleteResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\AutoCompleteResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\AutoCompleteResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation autoCompletePostAsync
     *
     * Find autocompletions for a query
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\AutoCompleteRequest $auto_complete_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoCompletePostAsync($api_version, $user_id, $auto_complete_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->autoCompletePostAsyncWithHttpInfo($api_version, $user_id, $auto_complete_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation autoCompletePostAsyncWithHttpInfo
     *
     * Find autocompletions for a query
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\AutoCompleteRequest $auto_complete_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function autoCompletePostAsyncWithHttpInfo($api_version, $user_id, $auto_complete_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\AutoCompleteResponse';
        $request = $this->autoCompletePostRequest($api_version, $user_id, $auto_complete_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'autoCompletePost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\AutoCompleteRequest $auto_complete_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function autoCompletePostRequest($api_version, $user_id, $auto_complete_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling autoCompletePost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling autoCompletePost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.autoCompletePost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'auto_complete_request' is set
        if ($auto_complete_request === null || (is_array($auto_complete_request) && count($auto_complete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auto_complete_request when calling autoCompletePost'
            );
        }

        $resourcePath = '/autoComplete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($auto_complete_request)) {
            $_tempBody = $auto_complete_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createEventsPost
     *
     * Create behavior events
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\CreateEventsRequest $create_events_request create_events_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function createEventsPost($api_version, $user_id, $create_events_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->createEventsPostWithHttpInfo($api_version, $user_id, $create_events_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation createEventsPostWithHttpInfo
     *
     * Create behavior events
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\CreateEventsRequest $create_events_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEventsPostWithHttpInfo($api_version, $user_id, $create_events_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->createEventsPostRequest($api_version, $user_id, $create_events_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEventsPostAsync
     *
     * Create behavior events
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\CreateEventsRequest $create_events_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEventsPostAsync($api_version, $user_id, $create_events_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->createEventsPostAsyncWithHttpInfo($api_version, $user_id, $create_events_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEventsPostAsyncWithHttpInfo
     *
     * Create behavior events
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\CreateEventsRequest $create_events_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEventsPostAsyncWithHttpInfo($api_version, $user_id, $create_events_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = 'object';
        $request = $this->createEventsPostRequest($api_version, $user_id, $create_events_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEventsPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\CreateEventsRequest $create_events_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEventsPostRequest($api_version, $user_id, $create_events_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling createEventsPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling createEventsPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.createEventsPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'create_events_request' is set
        if ($create_events_request === null || (is_array($create_events_request) && count($create_events_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_events_request when calling createEventsPost'
            );
        }

        $resourcePath = '/createEvents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($create_events_request)) {
            $_tempBody = $create_events_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBasketRecommendationsPost
     *
     * Get basket recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetBasketRecommendationsRequest $get_basket_recommendations_request get_basket_recommendations_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getBasketRecommendationsPost($api_version, $user_id, $get_basket_recommendations_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getBasketRecommendationsPostWithHttpInfo($api_version, $user_id, $get_basket_recommendations_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getBasketRecommendationsPostWithHttpInfo
     *
     * Get basket recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetBasketRecommendationsRequest $get_basket_recommendations_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBasketRecommendationsPostWithHttpInfo($api_version, $user_id, $get_basket_recommendations_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getBasketRecommendationsPostRequest($api_version, $user_id, $get_basket_recommendations_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBasketRecommendationsPostAsync
     *
     * Get basket recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetBasketRecommendationsRequest $get_basket_recommendations_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketRecommendationsPostAsync($api_version, $user_id, $get_basket_recommendations_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getBasketRecommendationsPostAsyncWithHttpInfo($api_version, $user_id, $get_basket_recommendations_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBasketRecommendationsPostAsyncWithHttpInfo
     *
     * Get basket recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetBasketRecommendationsRequest $get_basket_recommendations_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBasketRecommendationsPostAsyncWithHttpInfo($api_version, $user_id, $get_basket_recommendations_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetBasketRecommendationsResponse';
        $request = $this->getBasketRecommendationsPostRequest($api_version, $user_id, $get_basket_recommendations_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBasketRecommendationsPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetBasketRecommendationsRequest $get_basket_recommendations_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBasketRecommendationsPostRequest($api_version, $user_id, $get_basket_recommendations_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getBasketRecommendationsPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getBasketRecommendationsPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getBasketRecommendationsPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_basket_recommendations_request' is set
        if ($get_basket_recommendations_request === null || (is_array($get_basket_recommendations_request) && count($get_basket_recommendations_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_basket_recommendations_request when calling getBasketRecommendationsPost'
            );
        }

        $resourcePath = '/getBasketRecommendations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_basket_recommendations_request)) {
            $_tempBody = $get_basket_recommendations_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getComplementaryEntitiesPost
     *
     * Get Complementary entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesRequest $get_complementary_entities_request get_complementary_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getComplementaryEntitiesPost($api_version, $user_id, $get_complementary_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getComplementaryEntitiesPostWithHttpInfo($api_version, $user_id, $get_complementary_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getComplementaryEntitiesPostWithHttpInfo
     *
     * Get Complementary entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesRequest $get_complementary_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComplementaryEntitiesPostWithHttpInfo($api_version, $user_id, $get_complementary_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getComplementaryEntitiesPostRequest($api_version, $user_id, $get_complementary_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getComplementaryEntitiesPostAsync
     *
     * Get Complementary entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesRequest $get_complementary_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComplementaryEntitiesPostAsync($api_version, $user_id, $get_complementary_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getComplementaryEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_complementary_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getComplementaryEntitiesPostAsyncWithHttpInfo
     *
     * Get Complementary entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesRequest $get_complementary_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getComplementaryEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_complementary_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetComplementaryEntitiesResponse';
        $request = $this->getComplementaryEntitiesPostRequest($api_version, $user_id, $get_complementary_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getComplementaryEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetComplementaryEntitiesRequest $get_complementary_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getComplementaryEntitiesPostRequest($api_version, $user_id, $get_complementary_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getComplementaryEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getComplementaryEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getComplementaryEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_complementary_entities_request' is set
        if ($get_complementary_entities_request === null || (is_array($get_complementary_entities_request) && count($get_complementary_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_complementary_entities_request when calling getComplementaryEntitiesPost'
            );
        }

        $resourcePath = '/getComplementaryEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_complementary_entities_request)) {
            $_tempBody = $get_complementary_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntitiesByAttributePost
     *
     * Get entities by indexed attribute
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeRequest $get_entities_by_attribute_request get_entities_by_attribute_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getEntitiesByAttributePost($api_version, $user_id, $get_entities_by_attribute_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getEntitiesByAttributePostWithHttpInfo($api_version, $user_id, $get_entities_by_attribute_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getEntitiesByAttributePostWithHttpInfo
     *
     * Get entities by indexed attribute
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeRequest $get_entities_by_attribute_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitiesByAttributePostWithHttpInfo($api_version, $user_id, $get_entities_by_attribute_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getEntitiesByAttributePostRequest($api_version, $user_id, $get_entities_by_attribute_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitiesByAttributePostAsync
     *
     * Get entities by indexed attribute
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeRequest $get_entities_by_attribute_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesByAttributePostAsync($api_version, $user_id, $get_entities_by_attribute_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getEntitiesByAttributePostAsyncWithHttpInfo($api_version, $user_id, $get_entities_by_attribute_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitiesByAttributePostAsyncWithHttpInfo
     *
     * Get entities by indexed attribute
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeRequest $get_entities_by_attribute_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesByAttributePostAsyncWithHttpInfo($api_version, $user_id, $get_entities_by_attribute_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesByAttributeResponse';
        $request = $this->getEntitiesByAttributePostRequest($api_version, $user_id, $get_entities_by_attribute_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitiesByAttributePost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesByAttributeRequest $get_entities_by_attribute_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEntitiesByAttributePostRequest($api_version, $user_id, $get_entities_by_attribute_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getEntitiesByAttributePost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getEntitiesByAttributePost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getEntitiesByAttributePost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_entities_by_attribute_request' is set
        if ($get_entities_by_attribute_request === null || (is_array($get_entities_by_attribute_request) && count($get_entities_by_attribute_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_entities_by_attribute_request when calling getEntitiesByAttributePost'
            );
        }

        $resourcePath = '/getEntitiesByAttribute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_entities_by_attribute_request)) {
            $_tempBody = $get_entities_by_attribute_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEntitiesPost
     *
     * Get entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesRequest $get_entities_request get_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getEntitiesPost($api_version, $user_id, $get_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getEntitiesPostWithHttpInfo($api_version, $user_id, $get_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getEntitiesPostWithHttpInfo
     *
     * Get entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesRequest $get_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEntitiesPostWithHttpInfo($api_version, $user_id, $get_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getEntitiesPostRequest($api_version, $user_id, $get_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEntitiesPostAsync
     *
     * Get entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesRequest $get_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesPostAsync($api_version, $user_id, $get_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEntitiesPostAsyncWithHttpInfo
     *
     * Get entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesRequest $get_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
        $request = $this->getEntitiesPostRequest($api_version, $user_id, $get_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetEntitiesRequest $get_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEntitiesPostRequest($api_version, $user_id, $get_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_entities_request' is set
        if ($get_entities_request === null || (is_array($get_entities_request) && count($get_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_entities_request when calling getEntitiesPost'
            );
        }

        $resourcePath = '/getEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_entities_request)) {
            $_tempBody = $get_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPopularEntitiesPost
     *
     * Get popular entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetPopularEntitiesRequest $get_popular_entities_request get_popular_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getPopularEntitiesPost($api_version, $user_id, $get_popular_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getPopularEntitiesPostWithHttpInfo($api_version, $user_id, $get_popular_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getPopularEntitiesPostWithHttpInfo
     *
     * Get popular entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetPopularEntitiesRequest $get_popular_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPopularEntitiesPostWithHttpInfo($api_version, $user_id, $get_popular_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getPopularEntitiesPostRequest($api_version, $user_id, $get_popular_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPopularEntitiesPostAsync
     *
     * Get popular entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetPopularEntitiesRequest $get_popular_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPopularEntitiesPostAsync($api_version, $user_id, $get_popular_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getPopularEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_popular_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPopularEntitiesPostAsyncWithHttpInfo
     *
     * Get popular entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetPopularEntitiesRequest $get_popular_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPopularEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_popular_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
        $request = $this->getPopularEntitiesPostRequest($api_version, $user_id, $get_popular_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPopularEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetPopularEntitiesRequest $get_popular_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPopularEntitiesPostRequest($api_version, $user_id, $get_popular_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getPopularEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getPopularEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getPopularEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_popular_entities_request' is set
        if ($get_popular_entities_request === null || (is_array($get_popular_entities_request) && count($get_popular_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_popular_entities_request when calling getPopularEntitiesPost'
            );
        }

        $resourcePath = '/getPopularEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_popular_entities_request)) {
            $_tempBody = $get_popular_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecentEntitiesPost
     *
     * Get recent entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecentEntitiesRequest $get_recent_entities_request get_recent_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getRecentEntitiesPost($api_version, $user_id, $get_recent_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getRecentEntitiesPostWithHttpInfo($api_version, $user_id, $get_recent_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getRecentEntitiesPostWithHttpInfo
     *
     * Get recent entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecentEntitiesRequest $get_recent_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecentEntitiesPostWithHttpInfo($api_version, $user_id, $get_recent_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getRecentEntitiesPostRequest($api_version, $user_id, $get_recent_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecentEntitiesPostAsync
     *
     * Get recent entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecentEntitiesRequest $get_recent_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecentEntitiesPostAsync($api_version, $user_id, $get_recent_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getRecentEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_recent_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecentEntitiesPostAsyncWithHttpInfo
     *
     * Get recent entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecentEntitiesRequest $get_recent_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecentEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_recent_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetEntitiesResponse';
        $request = $this->getRecentEntitiesPostRequest($api_version, $user_id, $get_recent_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecentEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecentEntitiesRequest $get_recent_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecentEntitiesPostRequest($api_version, $user_id, $get_recent_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getRecentEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getRecentEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getRecentEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_recent_entities_request' is set
        if ($get_recent_entities_request === null || (is_array($get_recent_entities_request) && count($get_recent_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_recent_entities_request when calling getRecentEntitiesPost'
            );
        }

        $resourcePath = '/getRecentEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_recent_entities_request)) {
            $_tempBody = $get_recent_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRecommendedEntitiesPost
     *
     * Get recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesRequest $get_recommended_entities_request get_recommended_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getRecommendedEntitiesPost($api_version, $user_id, $get_recommended_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getRecommendedEntitiesPostWithHttpInfo($api_version, $user_id, $get_recommended_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getRecommendedEntitiesPostWithHttpInfo
     *
     * Get recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesRequest $get_recommended_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRecommendedEntitiesPostWithHttpInfo($api_version, $user_id, $get_recommended_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getRecommendedEntitiesPostRequest($api_version, $user_id, $get_recommended_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRecommendedEntitiesPostAsync
     *
     * Get recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesRequest $get_recommended_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecommendedEntitiesPostAsync($api_version, $user_id, $get_recommended_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getRecommendedEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_recommended_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRecommendedEntitiesPostAsyncWithHttpInfo
     *
     * Get recommendations
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesRequest $get_recommended_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRecommendedEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_recommended_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetRecommendedEntitiesResponse';
        $request = $this->getRecommendedEntitiesPostRequest($api_version, $user_id, $get_recommended_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRecommendedEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRecommendedEntitiesRequest $get_recommended_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRecommendedEntitiesPostRequest($api_version, $user_id, $get_recommended_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getRecommendedEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getRecommendedEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getRecommendedEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_recommended_entities_request' is set
        if ($get_recommended_entities_request === null || (is_array($get_recommended_entities_request) && count($get_recommended_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_recommended_entities_request when calling getRecommendedEntitiesPost'
            );
        }

        $resourcePath = '/getRecommendedEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_recommended_entities_request)) {
            $_tempBody = $get_recommended_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRelatedEntitiesPost
     *
     * Get related entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRelatedEntitiesRequest $get_related_entities_request get_related_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function getRelatedEntitiesPost($api_version, $user_id, $get_related_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->getRelatedEntitiesPostWithHttpInfo($api_version, $user_id, $get_related_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation getRelatedEntitiesPostWithHttpInfo
     *
     * Get related entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRelatedEntitiesRequest $get_related_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRelatedEntitiesPostWithHttpInfo($api_version, $user_id, $get_related_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->getRelatedEntitiesPostRequest($api_version, $user_id, $get_related_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRelatedEntitiesPostAsync
     *
     * Get related entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRelatedEntitiesRequest $get_related_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRelatedEntitiesPostAsync($api_version, $user_id, $get_related_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->getRelatedEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_related_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRelatedEntitiesPostAsyncWithHttpInfo
     *
     * Get related entities
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRelatedEntitiesRequest $get_related_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRelatedEntitiesPostAsyncWithHttpInfo($api_version, $user_id, $get_related_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\GetRelatedEntitiesResponse';
        $request = $this->getRelatedEntitiesPostRequest($api_version, $user_id, $get_related_entities_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRelatedEntitiesPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\GetRelatedEntitiesRequest $get_related_entities_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRelatedEntitiesPostRequest($api_version, $user_id, $get_related_entities_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling getRelatedEntitiesPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling getRelatedEntitiesPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.getRelatedEntitiesPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'get_related_entities_request' is set
        if ($get_related_entities_request === null || (is_array($get_related_entities_request) && count($get_related_entities_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $get_related_entities_request when calling getRelatedEntitiesPost'
            );
        }

        $resourcePath = '/getRelatedEntities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($get_related_entities_request)) {
            $_tempBody = $get_related_entities_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchPost
     *
     * Perform a search request
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\SearchRequest $search_request search_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Loop54\API\OpenAPI\Model\SearchResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails
     */
    public function searchPost($api_version, $user_id, $search_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        list($response) = $this->searchPostWithHttpInfo($api_version, $user_id, $search_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);
        return $response;
    }

    /**
     * Operation searchPostWithHttpInfo
     *
     * Perform a search request
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\SearchRequest $search_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \Loop54\API\OpenAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Loop54\API\OpenAPI\Model\SearchResponse|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails|\Loop54\API\OpenAPI\Model\ErrorDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchPostWithHttpInfo($api_version, $user_id, $search_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $request = $this->searchPostRequest($api_version, $user_id, $search_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\Loop54\API\OpenAPI\Model\SearchResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\SearchResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Loop54\API\OpenAPI\Model\ErrorDetails' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Loop54\API\OpenAPI\Model\ErrorDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Loop54\API\OpenAPI\Model\SearchResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\SearchResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Loop54\API\OpenAPI\Model\ErrorDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchPostAsync
     *
     * Perform a search request
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\SearchRequest $search_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPostAsync($api_version, $user_id, $search_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        return $this->searchPostAsyncWithHttpInfo($api_version, $user_id, $search_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchPostAsyncWithHttpInfo
     *
     * Perform a search request
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\SearchRequest $search_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchPostAsyncWithHttpInfo($api_version, $user_id, $search_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        $returnType = '\Loop54\API\OpenAPI\Model\SearchResponse';
        $request = $this->searchPostRequest($api_version, $user_id, $search_request, $user_ip, $user_useragent, $user_referer, $lib_version, $loop54_key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchPost'
     *
     * @param  string $api_version What version of the API to use. (required)
     * @param  string $user_id A unique identifier of the end user that initiated the action. (required)
     * @param  \Loop54\API\OpenAPI\Model\SearchRequest $search_request (required)
     * @param  string $user_ip The IP address of the end user. (optional)
     * @param  string $user_useragent The User-Agent header sent by the end user. (optional)
     * @param  string $user_referer The referer header sent by the end user. (optional)
     * @param  string $lib_version What library is used to generate this request. (optional)
     * @param  string $loop54_key Your API key. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchPostRequest($api_version, $user_id, $search_request, $user_ip = null, $user_useragent = null, $user_referer = null, $lib_version = null, $loop54_key = null)
    {
        // verify the required parameter 'api_version' is set
        if ($api_version === null || (is_array($api_version) && count($api_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $api_version when calling searchPost'
            );
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling searchPost'
            );
        }
        if (strlen($user_id) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_id" when calling UserInitiatedApi.searchPost, must be smaller than or equal to 100.');
        }

        // verify the required parameter 'search_request' is set
        if ($search_request === null || (is_array($search_request) && count($search_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search_request when calling searchPost'
            );
        }

        $resourcePath = '/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($api_version !== null) {
            $headerParams['Api-Version'] = ObjectSerializer::toHeaderValue($api_version);
        }
        // header params
        if ($user_id !== null) {
            $headerParams['User-Id'] = ObjectSerializer::toHeaderValue($user_id);
        }
        // header params
        if ($user_ip !== null) {
            $headerParams['User-Ip'] = ObjectSerializer::toHeaderValue($user_ip);
        }
        // header params
        if ($user_useragent !== null) {
            $headerParams['User-Useragent'] = ObjectSerializer::toHeaderValue($user_useragent);
        }
        // header params
        if ($user_referer !== null) {
            $headerParams['User-Referer'] = ObjectSerializer::toHeaderValue($user_referer);
        }
        // header params
        if ($lib_version !== null) {
            $headerParams['Lib-Version'] = ObjectSerializer::toHeaderValue($lib_version);
        }
        // header params
        if ($loop54_key !== null) {
            $headerParams['Loop54-key'] = ObjectSerializer::toHeaderValue($loop54_key);
        }


        // body params
        $_tempBody = null;
        if (isset($search_request)) {
            $_tempBody = $search_request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
