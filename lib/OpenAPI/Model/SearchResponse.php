<?php
/**
 * SearchResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Loop54 Engine
 *
 * Loop54 Search is a learning search engine for e-commerce. It helps online shoppers find what they’re looking for, and allows them to explore a wider range of relevant products in a retailer’s catalogue.
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Loop54\API\OpenAPI\Model;
use \Loop54\API\OpenAPI\ObjectSerializer;

/**
 * SearchResponse Class Doc Comment
 *
 * @category Class
 * @description The result of a search operation.
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SearchResponse extends Response 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'searchResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'makes_sense' => 'bool',
        'spelling_suggestions' => 'QueryCollection',
        'related_queries' => 'QueryCollection',
        'results' => 'EntityCollection',
        'related_results' => 'EntityCollection',
        'redirect' => 'string',
        'custom_data' => 'map[string,object]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'makes_sense' => null,
        'spelling_suggestions' => null,
        'related_queries' => null,
        'results' => null,
        'related_results' => null,
        'redirect' => null,
        'custom_data' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'makes_sense' => 'makesSense',
        'spelling_suggestions' => 'spellingSuggestions',
        'related_queries' => 'relatedQueries',
        'results' => 'results',
        'related_results' => 'relatedResults',
        'redirect' => 'redirect',
        'custom_data' => 'customData'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'makes_sense' => 'setMakesSense',
        'spelling_suggestions' => 'setSpellingSuggestions',
        'related_queries' => 'setRelatedQueries',
        'results' => 'setResults',
        'related_results' => 'setRelatedResults',
        'redirect' => 'setRedirect',
        'custom_data' => 'setCustomData'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'makes_sense' => 'getMakesSense',
        'spelling_suggestions' => 'getSpellingSuggestions',
        'related_queries' => 'getRelatedQueries',
        'results' => 'getResults',
        'related_results' => 'getRelatedResults',
        'redirect' => 'getRedirect',
        'custom_data' => 'getCustomData'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['makes_sense'] = isset($data['makes_sense']) ? $data['makes_sense'] : null;
        $this->container['spelling_suggestions'] = isset($data['spelling_suggestions']) ? $data['spelling_suggestions'] : null;
        $this->container['related_queries'] = isset($data['related_queries']) ? $data['related_queries'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['related_results'] = isset($data['related_results']) ? $data['related_results'] : null;
        $this->container['redirect'] = isset($data['redirect']) ? $data['redirect'] : null;
        $this->container['custom_data'] = isset($data['custom_data']) ? $data['custom_data'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['makes_sense'] === null) {
            $invalidProperties[] = "'makes_sense' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets makes_sense
     *
     * @return bool
     */
    public function getMakesSense()
    {
        return $this->container['makes_sense'];
    }

    /**
     * Sets makes_sense
     *
     * @param bool $makes_sense Whether or not the engine understood the search query.
     *
     * @return $this
     */
    public function setMakesSense($makes_sense)
    {
        $this->container['makes_sense'] = $makes_sense;

        return $this;
    }

    /**
     * Gets spelling_suggestions
     *
     * @return QueryCollection|null
     */
    public function getSpellingSuggestions()
    {
        return $this->container['spelling_suggestions'];
    }

    /**
     * Sets spelling_suggestions
     *
     * @param QueryCollection|null $spelling_suggestions A collection of suggestions for alternate spellings of the query.
     *
     * @return $this
     */
    public function setSpellingSuggestions($spelling_suggestions)
    {
        $this->container['spelling_suggestions'] = $spelling_suggestions;

        return $this;
    }

    /**
     * Gets related_queries
     *
     * @return QueryCollection|null
     */
    public function getRelatedQueries()
    {
        return $this->container['related_queries'];
    }

    /**
     * Sets related_queries
     *
     * @param QueryCollection|null $related_queries A collection of suggestions for queries that are related to the provided query.
     *
     * @return $this
     */
    public function setRelatedQueries($related_queries)
    {
        $this->container['related_queries'] = $related_queries;

        return $this;
    }

    /**
     * Gets results
     *
     * @return EntityCollection|null
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param EntityCollection|null $results The results that match the query.
     *
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets related_results
     *
     * @return EntityCollection|null
     */
    public function getRelatedResults()
    {
        return $this->container['related_results'];
    }

    /**
     * Sets related_results
     *
     * @param EntityCollection|null $related_results Any additional results that, while not matching, are relevant to the query.
     *
     * @return $this
     */
    public function setRelatedResults($related_results)
    {
        $this->container['related_results'] = $related_results;

        return $this;
    }

    /**
     * Gets redirect
     *
     * @return string|null
     */
    public function getRedirect()
    {
        return $this->container['redirect'];
    }

    /**
     * Sets redirect
     *
     * @param string|null $redirect The redirect target.
     *
     * @return $this
     */
    public function setRedirect($redirect)
    {
        $this->container['redirect'] = $redirect;

        return $this;
    }

    /**
     * Gets custom_data
     *
     * @return map[string,object]|null
     */
    public function getCustomData()
    {
        return $this->container['custom_data'];
    }

    /**
     * Sets custom_data
     *
     * @param map[string,object]|null $custom_data Any additional, non-standard, data. Contact support for information about how and when to use this.
     *
     * @return $this
     */
    public function setCustomData($custom_data)
    {
        $this->container['custom_data'] = $custom_data;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


