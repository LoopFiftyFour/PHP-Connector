<?php
/**
 * EntityCollectionParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Loop54 Engine
 *
 * Loop54 Search is a learning search engine for e-commerce. It helps online shoppers find what they’re looking for, and allows them to explore a wider range of relevant products in a retailer’s catalogue.
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 3.3.4
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Loop54\API\OpenAPI\Model;

use \ArrayAccess;
use \Loop54\API\OpenAPI\ObjectSerializer;

/**
 * EntityCollectionParameters Class Doc Comment
 *
 * @category Class
 * @description Specifies how a collection of entities should be paged, filtered, sorted and faceted.
 * @package  Loop54\API\OpenAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EntityCollectionParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'entityCollectionParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'skip' => 'int',
        'take' => 'int',
        'sort_by' => '\Loop54\API\OpenAPI\Model\EntitySortingParameter[]',
        'facets' => 'object[]',
        'filter' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'skip' => 'int32',
        'take' => 'int32',
        'sort_by' => null,
        'facets' => null,
        'filter' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'skip' => 'skip',
        'take' => 'take',
        'sort_by' => 'sortBy',
        'facets' => 'facets',
        'filter' => 'filter'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'skip' => 'setSkip',
        'take' => 'setTake',
        'sort_by' => 'setSortBy',
        'facets' => 'setFacets',
        'filter' => 'setFilter'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'skip' => 'getSkip',
        'take' => 'getTake',
        'sort_by' => 'getSortBy',
        'facets' => 'getFacets',
        'filter' => 'getFilter'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : 0;
        $this->container['take'] = isset($data['take']) ? $data['take'] : 5;
        $this->container['sort_by'] = isset($data['sort_by']) ? $data['sort_by'] : null;
        $this->container['facets'] = isset($data['facets']) ? $data['facets'] : null;
        $this->container['filter'] = isset($data['filter']) ? $data['filter'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['skip']) && ($this->container['skip'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'skip', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['skip']) && ($this->container['skip'] < 0)) {
            $invalidProperties[] = "invalid value for 'skip', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['take']) && ($this->container['take'] > 5000)) {
            $invalidProperties[] = "invalid value for 'take', must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['take']) && ($this->container['take'] < 0)) {
            $invalidProperties[] = "invalid value for 'take', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets skip
     *
     * @return int|null
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int|null $skip How many entities to skip when paging the result.
     *
     * @return $this
     */
    public function setSkip($skip)
    {

        if (!is_null($skip) && ($skip > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling EntityCollectionParameters., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($skip) && ($skip < 0)) {
            throw new \InvalidArgumentException('invalid value for $skip when calling EntityCollectionParameters., must be bigger than or equal to 0.');
        }

        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets take
     *
     * @return int|null
     */
    public function getTake()
    {
        return $this->container['take'];
    }

    /**
     * Sets take
     *
     * @param int|null $take How many entities to take when paging the result.
     *
     * @return $this
     */
    public function setTake($take)
    {

        if (!is_null($take) && ($take > 5000)) {
            throw new \InvalidArgumentException('invalid value for $take when calling EntityCollectionParameters., must be smaller than or equal to 5000.');
        }
        if (!is_null($take) && ($take < 0)) {
            throw new \InvalidArgumentException('invalid value for $take when calling EntityCollectionParameters., must be bigger than or equal to 0.');
        }

        $this->container['take'] = $take;

        return $this;
    }

    /**
     * Gets sort_by
     *
     * @return \Loop54\API\OpenAPI\Model\EntitySortingParameter[]|null
     */
    public function getSortBy()
    {
        return $this->container['sort_by'];
    }

    /**
     * Sets sort_by
     *
     * @param \Loop54\API\OpenAPI\Model\EntitySortingParameter[]|null $sort_by Array of sorting parameters specifying how the result should be sorted. The first sorting parameter specifies the primary order. If items are equal, they will be sorted using the second parameter, and so on.   The last two sorting parameters will always be descending relevance followed by ascending ID. These are added onto whatever sorting parameters are requested, such that any requested parameters get priority over those.   As a general rule, you can let Loop54 deal with relevance; things will be sorted the way you ask them to, but if there is ever a choice where both options are equally valid according to the request, the more relevant result will come first.   Concrete example to make this more clear: if you are selling podracers and your users want to sort them by number of engines, then all you need to pass in is the parameter to sort by ascending engine count. Loop54 will ensure that models with one engine will be shown first, in order of relevance; then all models with two engines, most relevant first again; and so on.   ID is used simply as a tiebreaker to get deterministic results (which is useful for pagination, among other things).
     *
     * @return $this
     */
    public function setSortBy($sort_by)
    {
        $this->container['sort_by'] = $sort_by;

        return $this;
    }

    /**
     * Gets facets
     *
     * @return object[]|null
     */
    public function getFacets()
    {
        return $this->container['facets'];
    }

    /**
     * Sets facets
     *
     * @param object[]|null $facets Array of facets to calculate and possibly filter the result on. If not set, no faceting is done.
     *
     * @return $this
     */
    public function setFacets($facets)
    {
        $this->container['facets'] = $facets;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return object|null
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param object|null $filter How the results should be filtered. If not set, no filtering is done.
     *
     * @return $this
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


